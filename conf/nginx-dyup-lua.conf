


# ./objs/nginx -c ./conf/nginx-dyup.conf -p .

# 本地运行 ./objs/nginx -c ./conf/nginx.conf -p .
# ./objs/nginx -c ./conf/nginx.conf -p . -s quit

#user  nobody;
worker_processes  1;

daemon off;
master_process off;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    # worker_connections  1024;
    worker_connections  255;
}


error_log logs/error.log debug;


http {
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$proxy_protocol_addr" "$proxy_protocol_port"'
                      '$proxy_host $proxy_port $proxy_add_x_forwarded_for $proxy_internal_body_length $proxy_internal_chunked';

    # access_log  logs/access.log  main;
    access_log /dev/stderr main;

    # 这里需要加上 openresty 路径，否则报错 "module 'resty.core' not found"
    lua_package_path "/usr/local/Cellar/openresty/1.21.4.2_1/lualib/?.lua;;";
    lua_package_cpath "/usr/local/Cellar/openresty/1.21.4.2_1/lualib/?.so;;";

    # curl localhost:7070/lua
    server {
        listen 7070 reuseport;
        root html;
        index index.html;
        #proxy_connect_timeout 1s;
        #proxy_timeout 3s;
        #proxy_pass tcp_backend;

        location /lua {
            # set_by_lua_block $a {
            #     ngx.log(ngx.ERR, "set_by_lua*")
            # }

            # https://moonbingbing.gitbooks.io/openresty-best-practices/content/ngx_lua/phase.html
            rewrite_by_lua_block {
                ngx.log(ngx.INFO, "rewrite_by_lua*")
            }
            access_by_lua_block {
                ngx.log(ngx.INFO, "access_by_lua*")
            }
            content_by_lua_block {
                ngx.say("hello world")
            }
            header_filter_by_lua_block {
                ngx.log(ngx.INFO, "header_filter_by_lua*")
            }
            body_filter_by_lua_block {
                ngx.log(ngx.INFO, "body_filter_by_lua*")
            }
            log_by_lua_block {
                ngx.log(ngx.INFO, "log_by_lua*")
            }
        }
    }


    server {
        listen 9090;

        location / {
            proxy_pass http://$host;
        }
    }

    server {
        listen 8088;
        location / {
            # echo 8088;
            root   html;
            index  index.html;
        }
    }

    server {
        listen 8089;
        location / {
            # echo 8089;
            root   html;
            index  index2.html;
        }
    }

    server {
        listen 9091;
        location / {
            dyups_interface;
        }
    }

    # http://nginx.org/en/docs/http/ngx_http_upstream_module.html
    upstream backend {
        server 127.0.0.1:6010 weight=5;
        # server backend1.example.com       weight=5;
        # server backend2.example.com:8080;
        # server unix:/tmp/backend3;

        # server backup1.example.com:8080   backup;
        # server backup2.example.com:8080   backup;
    }
    # dyups_upstream_conf  upstream.conf;
        # include upstream.conf;
    upstream host1 {
        server 127.0.0.1:8088;
    }

    upstream host2 {
        server 127.0.0.1:8089;
    }
}

