


# 因为 tcp 相比 http 简单，可以通过 tcp 来学习 nginx 源码

# ./bin/sbin/nginx -c conf/nginx-tcp.conf  -p .




worker_processes  1;
daemon off;
error_log stderr notice;

events {
    worker_connections  255;
    # worker_connections  1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';
    # access_log  logs/access.log  main;
    access_log /dev/stderr main; 

    lua_package_path "/usr/local/Cellar/openresty/1.21.4.2_1/lualib/?.lua;;";
    lua_package_cpath "/usr/local/Cellar/openresty/1.21.4.2_1/lualib/?.so;;";

    server {
        listen 4003;
        # root html;
        # index index.html;
        # location / {
        #     try_files $uri $uri/ =404;
        # }
        # location /proxy-pass {
        #     # rewrite $uri /;
        #     try_files $uri $uri/ =404;
        # }
        location / {
            proxy_pass       http://localhost:4002;
            proxy_set_header Host      $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}

stream {
    log_format main '$remote_addr [$time_local] $bytes_received $bytes_sent $protocol $status $connection $session_time';
    # log_format  main '$binary_remote_addr $bytes_received $bytes_sent $connection';
    # access_log  logs/access.log  main;
    access_log /dev/stdout main; 

    # 这里需要加上 openresty 路径，否则报错 "module 'resty.core' not found"
    lua_package_path "/usr/local/Cellar/openresty/1.21.4.2_1/lualib/?.lua;;";
    lua_package_cpath "/usr/local/Cellar/openresty/1.21.4.2_1/lualib/?.so;;";

    server {
        listen 4001 reuseport;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;

        # 启动 http server `python2 -m SimpleHTTPServer 4002`
        # http server
        proxy_pass 127.0.0.1:4002;

        # https://github.com/openresty/stream-lua-nginx-module
        # content_by_lua_block 会拦截 proxy_pass 使得其无效，返回 "hello world from lua block"
        # content_by_lua_block {
        #     ngx.say("hello world from lua block") -- output data
        # }
        # log_by_lua_block {
        #     ngx.log(ngx.INFO, "log_by_lua*")
        # }
    }

    server {
        listen 5001 reuseport;
        proxy_connect_timeout 1s;
        proxy_timeout 3s;

        # tcp server
        proxy_pass 127.0.0.1:5002;
    }

    upstream python_server {
        # http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#hash
        # 实现负载均衡算法: hash 和 一致性hash
        hash $remote_addr consistent;
        # http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#least_conn
        # 实现负载均衡算法: 最少链接数
        least_conn;
        server 127.0.0.1:4002 weight=5;
        server 127.0.0.1:4003 backup;
    }
}