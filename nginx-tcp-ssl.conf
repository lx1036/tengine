



# https://www.nginx.com/resources/wiki/start/topics/examples/full/


worker_processes  1;
daemon off;
error_log stderr notice;
# only-master 模式，只有 master 进程
master_process off;

events {
    worker_connections  1024;
}
 

http {
    lua_package_path "/usr/local/Cellar/openresty/1.21.4.2_1/lualib/?.lua;;";
    lua_package_cpath "/usr/local/Cellar/openresty/1.21.4.2_1/lualib/?.so;;";
#     default_type  application/octet-stream;

#     log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                       '$status $body_bytes_sent "$http_referer" '
#                       '"$http_user_agent" "$http_x_forwarded_for" "$proxy_protocol_addr" "$proxy_protocol_port"'
#                       '$proxy_host $proxy_port $proxy_add_x_forwarded_for $proxy_internal_body_length $proxy_internal_chunked';

#     # access_log  logs/access.log  main;
#     access_log /dev/stderr main; 

#     sendfile        on;
#     #tcp_nopush     on;

#     keepalive_timeout  65;
    # 证书在 https 里可以，但是在 tcp 里不可以，待解决!!!
    # `curl --cacert conf/ssl/ca.pem https://127.0.0.1:6003 -v`
    # server {
    #     listen 127.0.0.1:5003 ssl;
    #     ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    #     ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;
    #     ssl_certificate     ssl/server.pem;
    #     ssl_certificate_key ssl/server-key.pem;
    #     ssl_session_cache   shared:SSL:10m;
    #     ssl_session_timeout 10m;

    #     error_log stderr debug;
    #     root html;
    #     index index.html;
    #     location / {
    #         try_files $uri $uri/ =404;
    #     }
    #     # return "hello world";
    #     # proxy_pass 127.0.0.1:9091;
    # }

#     server {
#         listen 9091;
#         root html;
#         index index.html;
#         location / {
#             try_files $uri $uri/ =404;
#         }
#         location /proxy-pass {
#             # rewrite $uri /;
#             try_files $uri $uri/ =404;
#         }
#     }

} 

stream {
#     log_format  main '$binary_remote_addr $bytes_received $bytes_sent $connection'
#     # access_log  logs/access.log  main;
#     access_log /dev/stderr main; 

#     # 这里需要加上 openresty 路径，否则报错 "module 'resty.core' not found"
    lua_package_path "/usr/local/Cellar/openresty/1.21.4.2_1/lualib/?.lua;;";
    lua_package_cpath "/usr/local/Cellar/openresty/1.21.4.2_1/lualib/?.so;;";

    # server {
    #     listen 4001 reuseport;
    #     # proxy_connect_timeout 1s;
    #     # proxy_timeout 3s;

    #     # 启动 http server `python2 -m SimpleHTTPServer 4002`
    #     proxy_pass 127.0.0.1:4002;

    #     # https://github.com/openresty/stream-lua-nginx-module
    #     # content_by_lua_block 会拦截 proxy_pass 使得其无效，返回 "hello world from lua block"
    #     # content_by_lua_block {
    #     #     ngx.say("hello world from lua block") -- output data
    #     # }
    #     # log_by_lua_block {
    #     #     ngx.log(ngx.INFO, "log_by_lua*")
    #     # }
    # }

    server {
        listen 6001;
        return "hello world";
        # proxy_pass 127.0.0.1:9091;
    }

    server {
        listen 6002 udp;
        return "hello world";
        # proxy_pass 127.0.0.1:9091;
    }

    # `python3 tcp/tcp-server/tcp_ssl_client.py` 这个可以正常返回数据
    # `curl --cacert ssl/ca.pem https://127.0.0.1:5005 -v` 这个返回数据不符合 https 格式
    # `curl --cacert ssl/ca.pem 127.0.0.1:5005 -v` 这个通过抓包就没有握手
    # https://datatracker.ietf.org/doc/html/rfc5246
    server {
        listen 6005 ssl;
        ssl_protocols       TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;
        ssl_certificate     ssl/server.pem;
        ssl_certificate_key ssl/server-key.pem;
        # ssl_session_cache   shared:SSL:10m;
        ssl_session_timeout 10m;

        error_log stderr debug;
        
        # ssl_preread on;
        # return "HTTP/1.1 200 OK\r\n\r\nhello $ssl_preread_protocol, $ssl_preread_server_name, $ssl_preread_alpn_protocols";
        proxy_pass 127.0.0.1:6001;
    }

#     # upstream python_server {
#     #     # http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#hash
#     #     # 实现负载均衡算法: hash 和 一致性hash
#     #     hash $remote_addr consistent;
#     #     # http://nginx.org/en/docs/stream/ngx_stream_upstream_module.html#least_conn
#     #     # 实现负载均衡算法: 最少链接数
#     #     least_conn;
#     #     server 127.0.0.1:4002 weight=5;
#     #     server 127.0.0.1:4003 backup;
#     # }

    log_format proxy 'proxy upstream: upstream_addr:$upstream_addr upstream_bytes_sent:$upstream_bytes_sent
    upstream_connect_time:$upstream_connect_time upstream_first_byte_time:$upstream_first_byte_time
    upstream_session_time:$upstream_session_time upstream_bytes_received:$upstream_bytes_received';
    server {
        listen 6008;
        proxy_pass backend1;
        access_log /dev/stderr proxy;
    }
    upstream backend1 {
        server 127.0.0.1:6001 weight=5 max_conns=1000 max_fails=3 fail_timeout=5s;
    }
}


